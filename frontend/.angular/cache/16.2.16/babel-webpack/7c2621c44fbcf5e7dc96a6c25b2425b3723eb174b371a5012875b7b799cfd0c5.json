{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    register(request) {\n      // Clean up empty strings to null for optional fields\n      const cleanRequest = {\n        ...request,\n        company: request.company?.trim() || null,\n        mobile: request.mobile?.trim() || null,\n        officeNumber: request.officeNumber?.trim() || null,\n        designation: request.designation?.trim() || null\n      };\n      console.log('Sending register request:', cleanRequest);\n      console.log('API URL:', `${environment.apiUrl}/auth/register`);\n      return this.http.post(`${environment.apiUrl}/auth/register`, cleanRequest, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    login(request) {\n      console.log('Sending login request:', request);\n      console.log('API URL:', `${environment.apiUrl}/auth/login`);\n      return this.http.post(`${environment.apiUrl}/auth/login`, request, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).pipe(map(response => {\n        localStorage.setItem('currentUser', JSON.stringify(response));\n        this.currentUserSubject.next(response);\n        return response;\n      }));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n    verifyEmail(token) {\n      return this.http.get(`${environment.apiUrl}/auth/verify-email?token=${token}`);\n    }\n    isAuthenticated() {\n      return !!this.currentUserValue;\n    }\n    isPro() {\n      return this.currentUserValue?.isPro || false;\n    }\n    getToken() {\n      return this.currentUserValue?.token || null;\n    }\n    setToken(token) {\n      const authResponse = {\n        token,\n        isPro: false\n      };\n      localStorage.setItem('currentUser', JSON.stringify(authResponse));\n      this.currentUserSubject.next(authResponse);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}